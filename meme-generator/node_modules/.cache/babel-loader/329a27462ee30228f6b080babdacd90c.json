{"ast":null,"code":"var _jsxFileName = \"F:\\\\Scrimba\\\\Scrimba\\\\meme-generator\\\\src\\\\components\\\\Meme.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Meme() {\n  _s();\n\n  const [meme, setMeme] = React.useState({\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme-image\",\n        alt: \"MemePic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"S8z2hY0KMe4s+gA/fBjr8GmXjbM=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","Meme","meme","setMeme","useState","randomImage","allMemes","setAllMemes","useEffect","fetch","then","res","json","data","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme"],"sources":["F:/Scrimba/Scrimba/meme-generator/src/components/Meme.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction Meme(){\r\n    const [meme, setMeme] = React.useState({\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n    })\r\n\r\n    const [allMemes, setAllMemes] = React.useState([])\r\n\r\n    React.useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(res => res.json())\r\n            .then(data => setAllMemes(data.data.memes))\r\n    }, [])\r\n\r\n    function getMemeImage() {\r\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\r\n        const url = allMemes[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage: url\r\n        })) \r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <form>\r\n                    <input type='text'/>\r\n                    <input type='text'/>\r\n                    <button \r\n                        className=\"form--button\"\r\n                        onClick={getMemeImage}\r\n                    >\r\n                        Get a new meme image\r\n                    </button>\r\n            </form>\r\n            <div className=\"meme\">\r\n                <img src={meme.randomImage} className=\"meme-image\" alt=\"MemePic\"/>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Meme\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,GAAe;EAAA;;EACX,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,KAAK,CAACI,QAAN,CAAe;IACnCC,WAAW,EAAE;EADsB,CAAf,CAAxB;EAIA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,KAAK,CAACI,QAAN,CAAe,EAAf,CAAhC;EAEAJ,KAAK,CAACQ,SAAN,CAAgB,MAAM;IAClBC,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAIN,WAAW,CAACM,IAAI,CAACA,IAAL,CAAUC,KAAX,CAF7B;EAGH,CAJD,EAIG,EAJH;;EAMA,SAASC,YAAT,GAAwB;IACpB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,QAAQ,CAACc,MAApC,CAArB;IACA,MAAMC,GAAG,GAAGf,QAAQ,CAACU,YAAD,CAAR,CAAuBK,GAAnC;IACAlB,OAAO,CAACmB,QAAQ,KAAK,EACjB,GAAGA,QADc;MAEjBjB,WAAW,EAAEgB;IAFI,CAAL,CAAT,CAAP;EAIH;;EAED,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,wBACI;MAAA,wBACQ;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QADR,eAEQ;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QAFR,eAGQ;QACI,SAAS,EAAC,cADd;QAEI,OAAO,EAAEN,YAFb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHR;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAWI;MAAK,SAAS,EAAC,MAAf;MAAA,uBACI;QAAK,GAAG,EAAEb,IAAI,CAACG,WAAf;QAA4B,SAAS,EAAC,YAAtC;QAAmD,GAAG,EAAC;MAAvD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH;;GAvCQJ,I;;KAAAA,I;AAyCT,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}